#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_atomic_int64 : require

#include "rayCommon.glsl"

struct NodeInstance
{
    uint64_t vertexAddress;
    uint64_t indexAddress;
    uint64_t normalAddress;
    uint64_t uvAddress;
};

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 2) uniform Camera
{
    mat4 view;
    mat4 projection;
    mat4 viewInv;
    mat4 projectionInv;
} camera;
layout(set = 0, binding = 3, scalar) buffer SceneDescriptionBuffer
{
    NodeInstance instances[];
} sceneDescription;

layout(set = 0, binding = 4, scalar) buffer AtomicRayCounter
{
    uint64_t counter;
} ray;

layout(buffer_reference, scalar) buffer Vertices { vec3 v[]; };
layout(buffer_reference, scalar) buffer Indices { ivec3 i[]; };
layout(buffer_reference, scalar) buffer Normals { vec3 n[]; };

layout(push_constant) uniform uPushConstant
{
    vec4 dirLight;
    uint samplesComputed;
    uint samplesToComputeThisFrame;
} pc;

layout(location = 0) rayPayloadEXT PathPayload prd;
layout(location = 1) rayPayloadEXT ShadowHitPayload shadow_payload;

const vec3 light = vec3(0.0f, 100.0f, 0.0f);
uint64_t perInvocationRayCounter = 0;

#include "pathtrace.glsl"
#include "random.glsl"


void main() 
{
    // Initialize the random number
    prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pc.samplesComputed);

    const ivec2 imgCoords = ivec2(gl_LaunchIDEXT.xy);
    const ivec2 imgSize = ivec2(gl_LaunchSizeEXT.xy);
    vec3 pixelColor = vec3(0.f);

    for (uint s = pc.samplesComputed; s < (pc.samplesComputed + pc.samplesToComputeThisFrame); s++)
        pixelColor += samplePixel(imgCoords, imgSize, s);

    pixelColor /= pc.samplesToComputeThisFrame;

    if (pc.samplesComputed > 0) {
        vec3 oldColor = imageLoad(image, imgCoords).xyz;
        float newWeight = pc.samplesToComputeThisFrame / float(pc.samplesComputed + pc.samplesToComputeThisFrame);
        pixelColor = mix(oldColor, pixelColor, newWeight);
    }

    imageStore(image, imgCoords, vec4(pixelColor, 1.f));
    atomicAdd(ray.counter, perInvocationRayCounter);
}
